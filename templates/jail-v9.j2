#####################################
##                                 ##
## THIS FILE IS MANAGED BY ANSIBLE ##
##                                 ##
#####################################

[INCLUDES]

before = paths-{{ jail_include_os }}.conf

[DEFAULT]

ignoreip = 127.0.0.1/8

ignorecommand =

bantime  = {{ jail_bantime }}

findtime  = {{ jail_findtime }}

maxretry = {{ jail_maxretry }}

backend = auto

usedns = {{ jail_usedns }}

logencoding = auto

enabled = false

filter = %(__name__)s

destemail = {{ jail_dstmail }}

sender = {{ jail_sendermail }}

mta = sendmail

# Default protocol
protocol = tcp

# Specify chain where jumps would need to be added in iptables-* actions
chain = INPUT

# Ports to be banned
# Usually should be overridden in a particular jail
port = 0:65535

# Format of user-agent https://tools.ietf.org/html/rfc7231#section-5.5.3
fail2ban_agent = Fail2Ban/%(fail2ban_version)s

banaction = iptables-multiport
banaction_allports = iptables-allports

action_ = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]

action_mw = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
            %(mta)s-whois[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", protocol="%(protocol)s", chain="%(chain)s"]

action_mwl = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             %(mta)s-whois-lines[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", logpath=%(logpath)s, chain="%(chain)s"]

action_xarf = %(banaction)s[name=%(__name__)s, bantime="%(bantime)s", port="%(port)s", protocol="%(protocol)s", chain="%(chain)s"]
             xarf-login-attack[service=%(__name__)s, sender="%(sender)s", logpath=%(logpath)s, port="%(port)s"]

action_cf_mwl = cloudflare[cfuser="%(cfemail)s", cftoken="%(cfapikey)s"]
                %(mta)s-whois-lines[name=%(__name__)s, sender="%(sender)s", dest="%(destemail)s", logpath=%(logpath)s, chain="%(chain)s"]

action_blocklist_de  = blocklist_de[email="%(sender)s", service=%(filter)s, apikey="%(blocklist_de_apikey)s", agent="%(fail2ban_agent)s"]

action_badips = badips.py[category="%(__name__)s", banaction="%(banaction)s", agent="%(fail2ban_agent)s"]

action_badips_report = badips[category="%(__name__)s", agent="%(fail2ban_agent)s"]

action = %(action_)s

[sshd]
enabled = {{ jail_sshd }}
port    = ssh
logpath = %(sshd_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(sshd_backend)s{% endif %}

[sshd-ddos]
enabled = {{ jail_sshd_ddos }}
port    = ssh
logpath = %(sshd_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(sshd_backend)s{% endif %}


[dropbear]
enabled  = {{ jail_dropbear }}
port     = ssh
logpath  = %(dropbear_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(dropbear_backend)s{% endif %}

[selinux-ssh]
enabled  = {{ jail_selinux_ssh }}
port     = ssh
logpath  = %(auditd_log)s

[apache-auth]
enabled  = {{ jail_apache_auth }}
port     = http,https
logpath  = %(apache_error_log)s


[apache-badbots]
enabled  = {{ jail_apache_badbots }}
port     = http,https
logpath  = %(apache_access_log)s
bantime  = 172800
maxretry = 1


[apache-noscript]
enabled  = {{ jail_apache_noscript }}
port     = http,https
logpath  = %(apache_error_log)s


[apache-overflows]
enabled  = {{ jail_apache_overflow }}
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2


[apache-nohome]
enabled  = {{ jail_apache_nohome }}
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2


[apache-botsearch]
enabled  = {{ jail_apache_botsearch }}
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2


[apache-fakegooglebot]
enabled  = {{ jail_apache_fakegoolebot }}
port     = http,https
logpath  = %(apache_access_log)s
maxretry = 1
ignorecommand = %(ignorecommands_dir)s/apache-fakegooglebot <ip>


[apache-modsecurity]
enabled  = {{ jail_apache_modsecurity }}
port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2


[apache-shellshock]
enabled = {{ jail_apache_shellshock }}
port    = http,https
logpath = %(apache_error_log)s
maxretry = 1


[openhab-auth]
enabled = {{ jail_openhab_auth }}
filter  = openhab
action  = iptables-allports[name=NoAuthFailures]
logpath = /opt/openhab/logs/request.log

[nginx-http-auth]
enabled = {{ jail_nginx }}
port    = http,https
logpath = %(nginx_error_log)s

[nginx-limit-req]
enabled = {{ jail_nginx }}
port    = http,https
logpath = %(nginx_error_log)s

[nginx-botsearch]
enabled  = {{ jail_nginx }}
port     = http,https
logpath  = %(nginx_error_log)s
maxretry = 2

# Ban attackers that try to use PHP's URL-fopen() functionality
# through GET/POST variables. - Experimental, with more than a year
# of usage in production environments.

[php-url-fopen]

port    = http,https
logpath = %(nginx_access_log)s
          %(apache_access_log)s


[suhosin]

port    = http,https
logpath = %(suhosin_log)s


[lighttpd-auth]
# Same as above for Apache's mod_auth
# It catches wrong authentifications
port    = http,https
logpath = %(lighttpd_error_log)s


#
# Webmail and groupware servers
#

[roundcube-auth]

port     = http,https
logpath  = %(roundcube_errors_log)s


[openwebmail]

port     = http,https
logpath  = /var/log/openwebmail.log


[horde]

port     = http,https
logpath  = /var/log/horde/horde.log


[groupoffice]

port     = http,https
logpath  = /home/groupoffice/log/info.log


[sogo-auth]
# Monitor SOGo groupware server
# without proxy this would be:
# port    = 20000
port     = http,https
logpath  = /var/log/sogo/sogo.log


[tine20]

logpath  = /var/log/tine20/tine20.log
port     = http,https


#
# Web Applications
#
#

[drupal-auth]

port     = http,https
logpath  = %(syslog_daemon)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[guacamole]

port     = http,https
logpath  = /var/log/tomcat*/catalina.out

[monit]
#Ban clients brute-forcing the monit gui login
port = 2812
logpath  = /var/log/monit


[webmin-auth]

port    = 10000
logpath = %(syslog_authpriv)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[froxlor-auth]

port    = http,https
logpath  = %(syslog_authpriv)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

#
# HTTP Proxy servers
#
#

[squid]

port     =  80,443,3128,8080
logpath = /var/log/squid/access.log


[3proxy]

port    = 3128
logpath = /var/log/3proxy.log


#
# FTP servers
#


[proftpd]

port     = ftp,ftp-data,ftps,ftps-data
logpath  = %(proftpd_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(proftpd_backend)s{% endif %}

[pure-ftpd]

port     = ftp,ftp-data,ftps,ftps-data
logpath  = %(pureftpd_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(pureftpd_backend)s{% endif %}

[gssftpd]

port     = ftp,ftp-data,ftps,ftps-data
logpath  = %(syslog_daemon)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(syslog_backend)s{% endif %}

[wuftpd]

port     = ftp,ftp-data,ftps,ftps-data
logpath  = %(wuftpd_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(wuftpd_backend)s{% endif %}

[vsftpd]
# or overwrite it in jails.local to be
# logpath = %(syslog_authpriv)s
# if you want to rely on PAM failed login attempts
# vsftpd's failregex should match both of those formats
port     = ftp,ftp-data,ftps,ftps-data
logpath  = %(vsftpd_log)s


#
# Mail servers
#

# ASSP SMTP Proxy Jail
[assp]

port     = smtp,465,submission
logpath  = /root/path/to/assp/logs/maillog.txt


[courier-smtp]

port     = smtp,465,submission
logpath  = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(syslog_backend)s{% endif %}

[postfix]

port     = smtp,465,submission
logpath  = %(postfix_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(postfix_backend)s{% endif %}

[postfix-rbl]

port     = smtp,465,submission
logpath  = %(postfix_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(postfix_backend)s{% endif %}
maxretry = 1


[sendmail-auth]

port    = submission,465,smtp
logpath = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[sendmail-reject]

port     = smtp,465,submission
logpath  = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[qmail-rbl]

filter  = qmail
port    = smtp,465,submission
logpath = /service/qmail/log/main/current


# dovecot defaults to logging to the mail syslog facility
# but can be set by syslog_facility in the dovecot configuration.
[dovecot]

port    = pop3,pop3s,imap,imaps,submission,465,sieve
logpath = %(dovecot_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(dovecot_backend)s{% endif %}

[sieve]

port   = smtp,465,submission
logpath = %(dovecot_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(dovecot_backend)s{% endif %}

[solid-pop3d]

port    = pop3,pop3s
logpath = %(solidpop3d_log)s


[exim]

port   = smtp,465,submission
logpath = %(exim_main_log)s


[exim-spam]

port   = smtp,465,submission
logpath = %(exim_main_log)s


[kerio]

port    = imap,smtp,imaps,465
logpath = /opt/kerio/mailserver/store/logs/security.log


#
# Mail servers authenticators: might be used for smtp,ftp,imap servers, so
# all relevant ports get banned
#

[courier-auth]

port     = smtp,465,submission,imap3,imaps,pop3,pop3s
logpath  = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(syslog_backend)s{% endif %}

[postfix-sasl]

port     = smtp,465,submission,imap3,imaps,pop3,pop3s
# You might consider monitoring /var/log/mail.warn instead if you are
# running postfix since it would provide the same log lines at the
# "warn" level but overall at the smaller filesize.
logpath  = %(postfix_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(postfix_backend)s{% endif %}

[perdition]

port   = imap3,imaps,pop3,pop3s
logpath = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[squirrelmail]

port = smtp,465,submission,imap2,imap3,imaps,pop3,pop3s,http,https,socks
logpath = /var/lib/squirrelmail/prefs/squirrelmail_access_log


[cyrus-imap]

port   = imap3,imaps
logpath = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[uwimap-auth]

port   = imap3,imaps
logpath = %(syslog_mail)s
{% if fail2ban_version.stdout >= '9.4'-%}backend = %(syslog_backend)s{% endif %}

[named-refused]

port     = domain,953
logpath  = /var/log/named/security.log


[nsd]

port     = 53
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
logpath = /var/log/nsd.log



[asterisk]
enabled  = {{ jail_asterisk }}
port     = 5060,5061
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
logpath  = /var/log/asterisk/messages
maxretry = 10


[freeswitch]

port     = 5060,5061
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]
           %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
logpath  = /var/log/freeswitch.log
maxretry = 10


[mysqld-auth]

port     = 3306
logpath  = %(mysql_log)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(mysql_backend)s{% endif %}

[mongodb-auth]
port     = 27017
logpath  = /var/log/mongodb/mongodb.log

[recidive]

logpath  = /var/log/fail2ban.log
banaction = %(banaction_allports)s
bantime  = 604800  ; 1 week
findtime = 86400   ; 1 day

[pam-generic]
enabled   = {{ jail_pam_generic }}
banaction = %(banaction_allports)s
logpath  = %(syslog_authpriv)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(syslog_backend)s{% endif %}

[xinetd-fail]
enabled   = {{ jail_xinetd_fail }}
banaction = iptables-multiport-log
logpath   = %(syslog_daemon)s
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(syslog_backend)s{% endif %}
maxretry  = 2

[stunnel]

logpath = /var/log/stunnel4/stunnel.log


[ejabberd-auth]

port    = 5222
logpath = /var/log/ejabberd/ejabberd.log


[counter-strike]

logpath = /opt/cstrike/logs/L[0-9]*.log
# Firewall: http://www.cstrike-planet.com/faq/6
tcpport = 27030,27031,27032,27033,27034,27035,27036,27037,27038,27039
udpport = 1200,27000,27001,27002,27003,27004,27005,27006,27007,27008,27009,27010,27011,27012,27013,27014,27015
action  = %(banaction)s[name=%(__name__)s-tcp, port="%(tcpport)s", protocol="tcp", chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(udpport)s", protocol="udp", chain="%(chain)s", actname=%(banaction)s-udp]

# consider low maxretry and a long bantime
# nobody except your own Nagios server should ever probe nrpe
[nagios]

logpath  = %(syslog_daemon)s     ; nrpe.cfg may define a different log_facility
{% if fail2ban_version.stdout >= '9.4'-%}backend  = %(syslog_backend)s{% endif %}

maxretry = 1


[oracleims]
# see "oracleims" filter file for configuration requirement for Oracle IMS v6 and above
logpath = /opt/sun/comms/messaging64/log/mail.log_current
banaction = %(banaction_allports)s

[directadmin]
logpath = /var/log/directadmin/login.log
port = 2222

[portsentry]
logpath  = /var/lib/portsentry/portsentry.history
maxretry = 1

[pass2allow-ftp]
# this pass2allow example allows FTP traffic after successful HTTP authentication
port         = ftp,ftp-data,ftps,ftps-data
# knocking_url variable must be overridden to some secret value in jail.local
knocking_url = /knocking/
filter       = apache-pass[knocking_url="%(knocking_url)s"]
# access log of the website with HTTP auth
logpath      = %(apache_access_log)s
blocktype    = RETURN
returntype   = DROP
bantime      = 3600
maxretry     = 1
findtime     = 1


[murmur]
# AKA mumble-server
port     = 64738
action   = %(banaction)s[name=%(__name__)s-tcp, port="%(port)s", protocol=tcp, chain="%(chain)s", actname=%(banaction)s-tcp]
           %(banaction)s[name=%(__name__)s-udp, port="%(port)s", protocol=udp, chain="%(chain)s", actname=%(banaction)s-udp]
logpath  = /var/log/mumble-server/mumble-server.log


[screensharingd]
# For Mac OS Screen Sharing Service (VNC)
logpath  = /var/log/system.log
logencoding = utf-8

[haproxy-http-auth]
# HAProxy by default doesn't log to file you'll need to set it up to forward
# logs to a syslog server which would then write them to disk.
# See "haproxy-http-auth" filter for a brief cautionary note when setting
# maxretry and findtime.
logpath  = /var/log/haproxy.log

[slapd]
port    = ldap,ldaps
filter  = slapd
logpath = /var/log/slapd.log

[domino-smtp]
port    = smtp,ssmtp
filter  = domino-smtp
logpath = /home/domino01/data/IBM_TECHNICAL_SUPPORT/console.log
